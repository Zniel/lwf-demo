// https://raw.github.com/gree/lwf/master/LICENSE
// https://raw.github.com/gree/lwf/master/coffee/supports/tween.js/LICENSE
// Generated by CoffeeScript 1.3.3
(function() {
  var LWFPlayer, lastTime, players, vendor, _i, _len, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LWFPlayer = (function() {

    function LWFPlayer(stage) {
      this.stage = stage;
      this.onrelease = __bind(this.onrelease, this);

      this.onpress = __bind(this.onpress, this);

      this.onmove = __bind(this.onmove, this);

      LWF.useCanvasRenderer();
      this.cache = LWF.ResourceCache.get();
      this.requests = [];
    }

    LWFPlayer.prototype.requestLWF = function(lwfName, onload) {
      var prefix;
      if (lwfName.match(/(.*\/)([^\/]+)/)) {
        prefix = RegExp.$1;
        lwfName = RegExp.$2;
      } else {
        prefix = "";
      }
      return this.requests.push({
        lwf: lwfName,
        prefix: prefix,
        stage: this.stage,
        onprogress: function(loadedCount,total) {
    			var ctx = this.stage.getContext('2d');
    			ctx.clearRect(0, 0, this.stage.width, this.stage.height);
    			ctx.font = "10pt Arial";
    			ctx.fillText("loading " +
    				Math.floor(loadedCount / total * 100) + "%", 0, 20);
    		},
        onload: onload,
        useBackgroundColor: true
      });
    };

    LWFPlayer.prototype.loadLWFs = function(onloadall) {
      this.cache.loadLWFs(this.requests, onloadall);
      return this.requests = [];
    };

    LWFPlayer.prototype.load = function(lwfName) {
      var _this = this;
	  this.init();
      this.requestLWF(lwfName, function(lwf) {
        return _this.lwf = lwf;
      });
	  var _stage = this.stage;
      return this.loadLWFs(function(errors) {
        if (errors == null) {
          return _this.start();
        } else {
			var ctx = _stage.getContext('2d');
			ctx.clearRect(0, 0, _stage.width, _stage.height);
			ctx.font = "10pt Arial";
			ctx.fillText("Your browser doesn't support this sample.", 0, 20);
			var onpress = function() {
				window.location = "http://gree.github.com/lwf/";
			};
			_stage.addEventListener("mousedown", onpress, false);
			_stage.addEventListener("touchstart", onpress, false);
		}
      });
    };

    LWFPlayer.prototype.getTime = function() {
      return Date.now() / 1000.0;
    };

    LWFPlayer.prototype.inputPoint = function(e) {
      var x, y;
      x = e.offsetX;
      y = e.offsetY;
      return this.lwf.inputPoint(x, y);
    };

    LWFPlayer.prototype.inputPress = function(e) {
      this.inputPoint(e);
      return this.lwf.inputPress();
    };

    LWFPlayer.prototype.inputRelease = function(e) {
      this.inputPoint(e);
      return this.lwf.inputRelease();
    };

    LWFPlayer.prototype.onmove = function(e) {
      var _this = this;
      return (function(e) {
        return _this.inputQueue.push(function() {
          return _this.inputPoint(e);
        });
      })(e);
    };

    LWFPlayer.prototype.onpress = function(e) {
      var _this = this;
      return (function(e) {
        return _this.inputQueue.push(function() {
          return _this.inputPress(e);
        });
      })(e);
    };

    LWFPlayer.prototype.onrelease = function(e) {
      var _this = this;
      return (function(e) {
        return _this.inputQueue.push(function() {
          return _this.inputRelease(e);
        });
      })(e);
    };

    LWFPlayer.prototype.init = function() {
      this.inputQueue = [];
      this.from = this.getTime();
      this.exec();
    };

    LWFPlayer.prototype.start = function() {
      this.lwf.rendererFactory.fitForHeight(this.lwf);
      this.stage.addEventListener("mousedown", this.onpress, false);
      this.stage.addEventListener("mousemove", this.onmove, false);
      this.stage.addEventListener("mouseup", this.onrelease, false);
      this.stage.addEventListener("touchstart", this.onpress, false);
      this.stage.addEventListener("touchmove", this.onmove, false);
      return this.stage.addEventListener("touchend", this.onrelease, false);
    };

    LWFPlayer.prototype.exec = function() {
      var input, tick, time, _i, _len, _ref,
        _this = this;
      if (this.destroyed != null) {
        if (this.lwf != null) {
          this.stage.removeEventListener("mousedown", this.onpress, false);
          this.stage.removeEventListener("mousemove", this.onmove, false);
          this.stage.removeEventListener("mouseup", this.onrelease, false);
          this.stage.removeEventListener("touchstart", this.onpress, false);
          this.stage.removeEventListener("touchmove", this.onmove, false);
          this.stage.removeEventListener("touchend", this.onrelease, false);
          this.cache = null;
          this.lwf.destroy();
          this.lwf = null;
        }
        return;
      }
      time = this.getTime();
      tick = time - this.from;
      this.from = time;
	  if (this.lwf != null) {
        _ref = this.inputQueue;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          input();
        }
        this.lwf.exec(tick);
        this.lwf.render();
	  }
      this.inputQueue = [];
      return requestAnimationFrame(function() {
        return _this.exec();
      });
    };

    LWFPlayer.prototype.destroy = function() {
      return this.destroyed = true;
    };

    return LWFPlayer;

  })();

  if (window.requestAnimationFrame == null) {
    _ref = ['webkit', 'moz'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vendor = _ref[_i];
      window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
      if (window.requestAnimationFrame != null) {
        break;
      }
    }
  }

  if (window.requestAnimationFrame == null) {
    lastTime = 0;
    window.requestAnimationFrame = function(callback, element) {
      var currTime, id, timeToCall, timeoutCallback;
      currTime = new Date().getTime();
      if (lastTime === 0) {
        lastTime = currTime;
      }
      timeToCall = Math.max(0, 16 - (currTime - lastTime));
      timeoutCallback = function() {
        return callback(currTime + timeToCall);
      };
      id = window.setTimeout(timeoutCallback, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  players = [];

  (function(players) {
    window.addEventListener("load", function(e) {
      var i, path, player, stage, stages, _j, _len1, _results;
      stages = e.target.getElementsByTagName("canvas");
      if (stages.length === 0) {
        return null;
      }
      i = 0;
      _results = [];
      for (_j = 0, _len1 = stages.length; _j < _len1; _j++) {
        stage = stages[_j];
        path = stage.getAttribute("lwf");
        player = new LWFPlayer(stage);
        player.load(path);
        _results.push(players.push(player));
      }
      return _results;
    });
  })(players);

}).call(this);
